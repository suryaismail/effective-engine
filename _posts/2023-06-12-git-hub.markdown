---
layout: post
title:  "Working with GitHub"
date:   2023-06-12 22:08:49 +0800
categories: GitHub
---

### Github intro

Github is a version control tool. It is very powerful, and has a lot of features
for working collaboratively. We'll only use a few features for our project, so we can share
code and make sure our work doesn't get lost.

If you want to learn more, comprehensive documentation is available on the github website.
https://docs.github.com/en/desktop

### Creating a repository

This outlines the steps for create a repository for collaboration on GitHub

1. Create a github account at
https://github.com/

2. Download GitHub Desktop
https://desktop.github.com/

3. Create your Unity project as usual

4. In GitHub Desktop, create a new repository
  - Choose the folder ONE UP from where your Unity project is
  ![Unity directory structure]({{ site.baseurl }}/assets/images/unity-directory-structure.png)

  - Give your repository the same name as your Unity project
  - Select ‘Unity’ in the ‘Git Ignore’ section
  - Click Create Repository
  ![Create new repository]({{ site.baseurl }}/assets/images/create-new-repository.png)

  - Click yes for 'Initialize Git LFS'
  ![Initialize Git LFS]({{ site.baseurl }}/assets/images/initialize-git-lfs.png)

  - Check the 'History' tab to see the list of Unity files
  ![GitHub Initial History]({{ site.baseurl }}/assets/images/github-initial-history.png)

5. Click on 'Publish Repository'
  - Check your github account to see the new repository
![Publish repository]({{ site.baseurl }}/assets/images/publish-repository.png)

### Getting the project from the remote repository for the first time

The first time you access a remote repository from the github website, go to the
webpage of the repository (https://github.com/<username>/<repoName>). Then click
'Open with Github Desktop'
![Open with Github Desktop]({{ site.baseurl }}/assets/images/github-clone.png)

### Opening the project in Unity for the first time

1. Open Unity Hub, then select 'Open -> Add project from disk'
![Unity Open]({{ site.baseurl }}/assets/images/unity-add-project.png)

### Fetching and pulling changes

'Fetch' means to check for changes on the remote repository (on the github server).
'Pull' means to copy to changes into your local repository on your computer

1. Fetch from origin (from the remote github server), to see if any changes have been made
![Fetch]({{ site.baseurl }}/assets/images/github-fetch.png)

2. If there were changes, they will be shown in the changes tab.
![Changes]({{ site.baseurl }}/assets/images/github-changes.png)

3. If the changes look ok, go ahead and pull the changes into your local repository
![Pull]({{ site.baseurl }}/assets/images/github-pull.png)

4. Sometimes you may see errors when you pull. This happens when you're trying to pull
code that someone else has already changed. 
![Errors]({{ site.baseurl }}/assets/images/github-error.png)

5. Github Desktop has many ways to fix things if two people try to change the same file
 (google 'git stash' and 'git merge'). But the simplest way is to discard your changes,
 then pull the changes from the remote repository.
![Discard changes]({{ site.baseurl }}/assets/images/github-discard-changes.png)

You can copy (backup) your changes into another directory, then copy them back into your
project after you're done with the pull.

### Committing and pushing code

Committing code means saving a version of it in your *local* repository. This means
you can always go back to it at a later time, and you save a history of it.
But, since it's only on your local machine, other people can't see it.

Publishing or pushing code means sending your changes to the *remote* repository
(on the Github server).

1. To commit, check your changes in the commit tab. If you're happy with the changes,
fill in a summary and description of your changes, then hit the 'Commit to main' button
![Local changes]({{ site.baseurl }}/assets/images/github-local-changes.png)

2. After committing, click 'Push origin'
You can commit many times before you decide your changes are good enough to push.
![Push changes]({{ site.baseurl }}/assets/images/github-push.png)

3. Sometimes you may see errors when you try to push. This happens when the code you're
trying to push conflicts with code that someone else already changed
  - Backup your changes
  - Follow the steps to discard your local changes
  - Pull the latest changes from the remote host
  - Copy your changes back into the project
  - You should now be able to push


